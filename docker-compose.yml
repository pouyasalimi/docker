version: '3'

services:
    backend-app:
        container_name: "${DOCKER_BASE_NAME}-laravel"
        build:
            context: "../"
            dockerfile: "./docker/runtimes/php/${DOCKER_PHP_VER}/Dockerfile"
        image: "${DOCKER_BASE_NAME}-${DOCKER_PHP_VER}/laravel"
        volumes:
            - "../:/var/www/html"
            - "./runtimes/php/${DOCKER_PHP_VER}/local.ini:/usr/local/etc/php/conf.d/99-local.ini"
            - "./runtimes/php/${DOCKER_PHP_VER}/zzz.docker.conf:/usr/local/etc/php-fpm.d/zzz.docker.conf"
            - "./runtimes/php/${DOCKER_PHP_VER}/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf"
        restart: unless-stopped
        networks:
            - backend-network

    webserver:
        container_name: "${DOCKER_BASE_NAME}-webserver"
        image: nginx:alpine
        ports:
            - "8080:80"
        volumes:
            - "../:/var/www/html"
            - "./runtimes/nginx/nginx.conf:/etc/nginx/nginx.conf"
            - "./runtimes/nginx/templates/default.local.conf.template:/etc/nginx/templates/default.conf.template"
        depends_on:
            - backend-app
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "service", "nginx", "status"]
        networks:
            - backend-network

    db:
        image: 'mariadb:10.5'
        container_name: "${DOCKER_BASE_NAME}-mariadb"
        ports:
            - "3306:3306"
        environment:
            MYSQL_ROOT_PASSWORD: '${DOCKER_MYSQL_ROOT_PASSWORD}'
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
        volumes:
            - 'local-db:/var/lib/mysql'
        networks:
            - backend-network
        healthcheck:
            test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", '${DB_USERNAME}', '-p${DB_PASSWORD}']
            timeout: 20s
            retries: 10
        restart: unless-stopped

    adminer:
        container_name: "${DOCKER_BASE_NAME}-adminer"
        image: dockette/adminer:dg
        environment:
            - MEMORY=1024M
            - UPLOAD=102400M
        restart: unless-stopped
        ports:
            - "8081:80"
        networks:
            - backend-network
        links:
            - db:db
        depends_on:
            - db

    redis:
        container_name: "${DOCKER_BASE_NAME}-redis"
        image: 'redis:alpine'
        ports:
            - "127.0.0.1:6380:6379"
        volumes:
            - 'local-redis:/data'
        networks:
            - backend-network
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
        restart: unless-stopped

    mailhog:
        container_name: "${DOCKER_BASE_NAME}-mailhog"
        image: 'mailhog/mailhog:latest'
        ports:
            - "127.0.0.1::1025:1025"
            - "127.0.0.1:8025:8025"
        networks:
            - backend-network
        restart: unless-stopped

networks:
    backend-network:
        driver: bridge
volumes:
    local-db:
        driver: local
    local-redis:
        driver: local
